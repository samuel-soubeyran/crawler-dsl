start { download "url" }
download "url" recipe {
    emit page to { parse "continent" }
}

parse "continent" recipe {
    cssSelector "a[href~=AllLocations-g\\d+-Places]"
    attributeSelector "href"
    prepend "http://www.tripadvisor.com"
    emit link to { download "location" }
}

download "location" recipe {
    emit page to { parse "location" }
}

parse "location" recipe {
    cssSelector "a[href~=(AllLocations-g\\d+-c\\d+-(o\\d+-)?Hotels)]"
    attributeSelector "href"
    prepend "http://www.tripadvisor.com"
    emit link to { download "location" }

    cssSelector "a[href~=(Hotel_Review-g\\d+-d\\d+-Reviews)]"
    attributeSelector "href"
    prepend "http://www.tripadvisor.com"
    emit link to  { download "property" }
}

download "property" recipe {
    emit page to {parse "property"}
}

parse "property" recipe {
    cssSelector "body" }
    emit object fields([
        city : {
            textCssSelector "span[property=addressLocality]"
            toFirstElement
        },
        country : {
            textCssSelector "a[onClick*=Country] > span"
            toFirstElement
        },
        continent : { 
            apply { regexp it,  "Continent\\\\\",\\\\\"([\\w\\s]+)-"}
            apply { toFirstElement it }
        },
        description : {
            apply { textCssSelector it,  "a[onClick*=Country] > span"}
            apply { toFirstElement it }
        },
        hotelId : {
            apply { extractCrawledUrl it}
            apply { regexp it,  "d(\\d+)"}
            apply { toFirstElement it }            
        },
        marketName : {
            apply { textCssSelector it, "b.rank ~ a" }
            apply { toFirstElement it }            
        },
        phone : {
            apply { phoneExtractor it }            
            apply { toFirstElement it }            
        },
        highlights : {
            apply { textCssSelector it, ".highlight" }
        }
    ])
}

def phoneExtractor (input) {

}

def textCssSelector (input, selector) {

}

def cssSelector( input, selector)  {
    println "cssSelector input " + input
    "AllLocation-g123456-c123456-Hotels-Germany"
}

def prepend( input, value){
    println "prepend input " + input
    return value + input
}
